"""
TWODEVMANAGER setup di un solo DevManager.
"""
import os
import asyncio
import subprocess
from typing import List
from seq.lib.nodes import Sequence, Action, Template, Parallel
from seq.lib.nodes import get_param
from seq.lib import logConfig
from seq.lib.log import getUserLogger

def hlcc_available():
    return ("no"[0].upper() == "Y")

import tdm.fcs.clib.fcs_async_commands as fcs
import ifw.core.stooUtils.consul as consul_utils
import ifw.sup.syssup.clib.syssup_commands as sup
import ifw.fcf.clib.setup_buffer as sbuf
#from ifw.ccf.clib.ccf_async_commands import CcfAsyncCommands

if hlcc_available():
    import tdm.seq.tpl.ccsif_async_commands as ccs

logger = getUserLogger()



async def start_viewer(uri: str):
    """Start DDT Viewer."""
    cmd = f"ddtViewer -l \"{uri}/broker/Broker1\" -s \"CcfTest11\" &"
    await asyncio.create_subprocess_shell(cmd, stdin=asyncio.subprocess.DEVNULL,
                                          stdout=asyncio.subprocess.DEVNULL)
async def start_fcfgui(uri: str):
    """Start FCF Engineering Panel"""
    cmd = f"pyfcfgui --uri \"{uri}/\" &"
    await asyncio.create_subprocess_shell(cmd, stdin=asyncio.subprocess.DEVNULL,
                                          stdout=asyncio.subprocess.DEVNULL)
async def start_ccssim():
    """Start CCS IF GUI."""
    if not hlcc_available():
        return
    cmd = f"hlcctelsimui &"
    await asyncio.create_subprocess_shell(cmd, stdin=asyncio.subprocess.DEVNULL,
                                          stdout=asyncio.subprocess.DEVNULL)
                                          


class Tpl(Sequence):
	
	async def init(self):
		"""inizializzo template"""
		self._running = True
		
		self.cons = cons = consul_utils.ConsulClient()
		
		self.fcf_name = "fcs2"
		self.fcf_uri = self.cons.get_uri(f"{self.fcf_name}-req")
		if hlcc_available():
			self.ccs_name = "telifsim"
			self.ccs_uri = self.cons.get_uri(f"telifsim")
		
		self.sup_uri = self.cons.get_uri("syssup-req")
		
		
		
		
	async def start_guis(self):
		"""faccio partire la GUI"""
		logger.info("Starting FCF Engineering Panel ...")
		await start_fcfgui(self.fcf_uri)
		
		if hlcc_available:
			logger.info("Starting Telescope Simulator GUI ...")
			await start_ccssim()
			
			
	async def setup_subsystems(self):
		"""Qui prendo i parametri dell'OB e li passo al FCS"""
		with sup.SysSupCommands(self.sup_uri, timeout=2000) as supif:
			if not supif.is_operational():  # Instrument should really be Idle
				raise RuntimeError("Instrument is not operational")
		
		with fcs.FcsAsyncCommands(self.fcf_uri, 60000) as fcs_if:
			buffer = sbuf.SetupBuffer(fcs_if._ciiAsync)
			
			"""Handling of template parameters"""
			"""Prendiamo solo i valori dello SHUTTER"""
			intensity = int(get_param("INS.LAMP1.INTPOWER"))
			if get_param("INS.LAMP1.ON").lower() == "true":
				buffer.add_lamp_switch_on_with_intensity("lamp1", intensity)
			else:
				buffer.add_lamp_switch_off("lamp1")
			"""Setup FCF"""
			logger.info("Setting up FCS ...")
			"""Asynchronous setup"""
			await fcs_if._setup(buffer, keep=False)
			
			
	@staticmethod
	def create(*args, **kw):
		a = Tpl()
		
		#anche se sono gli stessi passaggi devo mettere l'if
		p = Parallel.create(a.setup_subsystems, name = "Setting up subsystems", **kw)
		s = Sequence.create(a.init, a.start_guis, p, name = "tdm_base_param1", **kw)
		
		return s

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
