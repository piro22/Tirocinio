#!/usr/bin/env python
"""
TWODEVMANAGER acquisition template.
"""
import os
import asyncio
import subprocess
from typing import List
from seq.lib.nodes import Sequence, Action, Template, Parallel
from seq.lib.nodes import get_param
from seq.lib import logConfig
from seq.lib.log import getUserLogger

def hlcc_available():
    return ("no"[0].upper() == "Y")

import tdm.fcs.clib.fcs_async_commands as fcs
import ifw.core.stooUtils.consul as consul_utils
import ifw.sup.syssup.clib.syssup_commands as sup
import ifw.fcf.clib.setup_buffer as sbuf
from ifw.ccf.clib.ccf_async_commands import CcfAsyncCommands

if hlcc_available():
    import tdm.seq.tpl.ccsif_async_commands as ccs

logger = getUserLogger()

async def start_viewer(uri: str):
    """Start DDT Viewer."""
    cmd = f"ddtViewer -l \"{uri}/broker/Broker1\" -s \"CcfTest11\" &"
    await asyncio.create_subprocess_shell(cmd, stdin=asyncio.subprocess.DEVNULL,
                                          stdout=asyncio.subprocess.DEVNULL)
async def start_fcfgui(uri: str):
    """Start FCF Engineering Panel"""
    cmd = f"pyfcfgui --uri \"{uri}/\" &"
    await asyncio.create_subprocess_shell(cmd, stdin=asyncio.subprocess.DEVNULL,
                                          stdout=asyncio.subprocess.DEVNULL)

async def start_ccfgui(uri: str):
    """Start CCF Engineering Panel"""
    cmd = f"ccfGui -r \"{uri}/\" -p cii.oldb:///elt/tdm/dcs &"
    await asyncio.create_subprocess_shell(cmd, stdin=asyncio.subprocess.DEVNULL,
                                          stdout=asyncio.subprocess.DEVNULL)

async def start_ccssim():
    """Start CCS IF GUI."""
    if not hlcc_available():
        return
    cmd = f"hlcctelsimui &"
    await asyncio.create_subprocess_shell(cmd, stdin=asyncio.subprocess.DEVNULL,
                                          stdout=asyncio.subprocess.DEVNULL)

class Tpl(Sequence):
    async def init(self):
        """Initializes template."""
        self._running = True
        
        self.cons = cons = consul_utils.ConsulClient()
        self.ddt_uri = self.cons.get_uri("tdmbroker")

        self.ccf_name = "tdmccf"
        self.ccf_uri = self.cons.get_uri(f"{self.ccf_name}-req")  

        if hlcc_available():
            self.ccs_name = "telifsim"
            self.ccs_uri = self.cons.get_uri(f"telifsim")

        self.sup_uri = self.cons.get_uri("syssup-req")

        self.expo_time = 3  # expected integration time is 3s
        self.await_timeout = self.expo_time + 10  # Assume 10s overhead is enough


    async def start_guis(self):
        """Start all GUIs."""
        logger.info("Starting CCF Engineering Panel ...")
        await start_ccfgui(self.ccf_uri)
        if hlcc_available():
            logger.info("Starting Telescope Simulator GUI ...")
            await start_ccssim()


    async def setup_subsystems(self):
        """Setup instrument subsystems."""

        with sup.SysSupCommands(self.sup_uri, timeout=2000) as supif:
            if not supif.is_operational():  # Instrument should really be Idle
                raise RuntimeError("Instrument is not operational")

        """Setup CCF"""
        
        logger.info("Al posto di EXP.Time uso BIN.x")
        binx = int(get_param("BIN.X"))
        exptime = int(get_param("DET.EXP.TIME"))
        logger.info("Sending setup to CCF ...")
        """metto tutto in riga per errori di indentation"""
        with CcfAsyncCommands(self.ccf_uri, 60000) as ccf_if:await ccf_if.setup(f"expo.bin_x={binx}");await ccf_if.setup(f"expo.time={exptime}")
	
    @staticmethod
    def create(*args, **kw):
        a = Tpl()
        if hlcc_available():
            p = Parallel.create(a.setup_subsystems, name="Setting up subsystems", **kw)
            s = Sequence.create(a.init,
                                a.start_guis,
                                p,
                                name="TEST",
                                **kw)
        else:
            p = Parallel.create(a.setup_subsystems, name="Setting up subsystems", **kw)
            s = Sequence.create(a.init,
                                a.start_guis,
                                p,
                                name="TEST",
                                **kw)
        return s
